# Default values for docker-registry.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
# This chart now uses StatefulSet instead of Deployment for better state management.
replicaCount: 2

strategy:
  type: RollingUpdate
  rollingUpdate:
    maxSurge: 1
    maxUnavailable: 1

podAnnotations: {}
podLabels: {}

serviceAccount:
  create: false
  name: ""
  annotations: {}

fullnameOverride: registry
image:
  repository: registry
  tag: 3.0.0
  pullPolicy: IfNotPresent
# imagePullSecrets:
    # - name: docker

# ECR Proxy Configuration
ecrProxy:
  enabled: true
  # Secret containing ECR credentials (.dockerconfigjson format)
  secretName: "dataos-container-registry"

statefulset: {}
  # annotations:
service:
  name: registry
  type: ClusterIP
  # sessionAffinity: None
  # sessionAffinityConfig: {}
  # clusterIP:
  port: 443
  targetPort: 443
  # nodePort:
  # loadBalancerIP:
  # loadBalancerSourceRanges:
  annotations: {}
  # foo.io/bar: "true"
  labels: {}
  # foo.io/baz: "false"
ingress:
  enabled: false
  className: "kong"
  annotations:
    konghq.com/https-redirect-status-code: "308"
    konghq.com/protocols: http # Changed from https to http for cloudflare ssl termination
    konghq.com/strip-path: "true"
    # Allow large uploads for Docker images
    konghq.com/client-max-body-size: "0"
    konghq.com/read-timeout: "3600"
    konghq.com/write-timeout: "3600"
    konghq.com/connect-timeout: "60"
    konghq.com/backend-protocol: "http"
    # Docker registry specific headers - simplified
  path: /
  pathType: ImplementationSpecific # Changed from Prefix to ImplementationSpecific to use same domain
  # Used to create an Ingress record.
  hosts:
    - registry-<your-domain>
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  labels: {}
  tls:
    - secretName: registry-subdomain-tls
      hosts:
        - registry-<your-domain>
resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi
persistence:
  accessMode: 'ReadWriteOnce'
  enabled: true
  size: 10Gi
  storageClass: "disk-premium-retain"
  existingClaim: ""  # Set to PVC name to reuse existing PVC, leave empty to create new PVC with chart name

# set the type of filesystem to use: filesystem, s3
storage: filesystem

# Probe configuration for better reliability
probes:
  livenessProbe:
    httpGet:
      path: /
      port: 443
      scheme: HTTPS
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
  readinessProbe:
    httpGet:
      path: /
      port: 443
      scheme: HTTPS
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 3
secrets:
  haSharedSecret: ""
  htpasswd: "admin:$2y$05$Um.CVlOu3sSUQd2jJKl3OutTdbHtHZpZWk1hb99Ep58wIMFoIm2cK"
  # To change password run:
  # docker run --entrypoint htpasswd httpd:2 -Bbn admin kuchnayapassword123 > ./htpasswd

# Secrets for Azure
#   azure:
#     accountName: ""
#     accountKey: ""
#     container: ""
# Secrets for S3 access and secret keys
# Use a secretRef with keys (accessKey, secretKey) for secrets stored outside the chart
  s3:
    secretRef: ""
    accessKey: ""
    secretKey: ""
# Secrets for Swift username and password
#   swift:
#     username: ""
#     password: ""

# Options for s3 storage type:
s3:
  enabled: true
  region: ap-south-1
  regionEndpoint: https://s3.ap-south-1.amazonaws.com/
  bucket: ops001-famousgri-dev
  rootdirectory: registry
  encrypt: true
  secure: true
  forcepathstyle: true
  skipverify: true

# Options for swift storage type:
# swift:
#   authurl: http://swift.example.com/
#   container: my-container

# https://docs.docker.com/registry/recipes/mirror/
proxy:
  enabled: true
  remoteurl: https://registry-1.docker.io
  username: ""
  password: ""
  # the ref for a secret stored outside of this chart
  # Keys: proxyUsername, proxyPassword
  secretRef: "dataos-container-registry"

metrics:
  enabled: false
  port: 5001
  # Create a prometheus-operator servicemonitor
  serviceMonitor:
    enabled: false
    labels: {}
  # prometheus-operator PrometheusRule defining alerting rules for a Prometheus instance
  prometheusRule:
    enabled: false
    labels: {}
    rules: {}

configPath: /etc/distribution
configData:
  version: 0.1
  log:
    fields:
      service: registry
  storage:
    cache:
      blobdescriptor: inmemory
    delete:
      enabled: true
    # filesystem: #to add local storage for registry to push images
    #   rootdirectory: /var/lib/registry #to add local storage for registry to push images
    #   maxthreads: 100 #to add local storage for registry to push images
  http:
    addr: :443
    headers:
      X-Content-Type-Options: [nosniff]
    debug:
      addr: :5001
      prometheus:
        enabled: false
        path: /metrics
    tls:
      certificate: /etc/registry/tls/tls.crt
      key: /etc/registry/tls/tls.key
  auth:
    htpasswd:
      realm: basic-realm
      path: /auth/htpasswd
  health:
    storagedriver:
      enabled: true
      interval: 10s
      threshold: 3
  # Proxy configuration for ECR - this makes it work as a mirror
  proxy:
    remoteurl: https://registry-1.docker.io
    username: ${REGISTRY_PROXY_USERNAME}
    password: ${REGISTRY_PROXY_PASSWORD}
    # Add these settings to make it work as a proper mirror
    ttl: 720h # 30 days
    # Enable caching
    cache:
      blobdescriptor: inmemory
  tracing:
    enabled: false

containerSecurityContext:
  enabled: true
  seLinuxOptions: {}
  allowPrivilegeEscalation: false
  capabilities:
    drop:
      - ALL
  privileged: false
  readOnlyRootFilesystem: false
  runAsUser: 1000
  runAsGroup: 1000
  runAsNonRoot: true
  seccompProfile:
    type: RuntimeDefault

securityContext:
  enabled: true
  fsGroupChangePolicy: Always
  sysctls: []
  supplementalGroups: []
  runAsUser: 1000
  fsGroup: 1000

priorityClassName: ""

podDisruptionBudget:
  minAvailable: 1
  # maxUnavailable: 1
  # minAvailable: 2

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 2
  targetCPUUtilizationPercentage: 60
  targetMemoryUtilizationPercentage: 60 # available only on Kubernetes ≥1.23 [required "autoscaling/v2"]
  behavior: {} # available only on Kubernetes ≥1.23 [required "autoscaling/v2"]
#   scaleDown:
#     stabilizationWindowSeconds: 300
#     policies:
#     - type: Percent
#       value: 100
#       periodSeconds: 15
#   scaleUp:
#     stabilizationWindowSeconds: 0
#     policies:
#     - type: Percent
#       value: 100
#       periodSeconds: 15
#     - type: Pods
#       value: 4
#       periodSeconds: 15
#     selectPolicy: Max

nodeSelector: {}

affinity: {}

tolerations:
  # Built-in tolerations for better availability
  - key: node.kubernetes.io/unreachable
    operator: Exists
    effect: NoExecute
    tolerationSeconds: 30
  - key: node.kubernetes.io/not-ready
    operator: Exists
    effect: NoExecute
    tolerationSeconds: 30

extraVolumeMounts:
  - name: registry-tls
    mountPath: /etc/registry/tls
    readOnly: true
## Additional volumeMounts to the registry container.
#  - mountPath: /secret-data
#    name: cloudfront-pem-secret
#    readOnly: true

extraVolumes:
  - name: registry-tls
    secret:
      secretName: registry-subdomain-tls
## Additional volumes to the pod.
#  - name: cloudfront-pem-secret
#    secret:
#      secretName: cloudfront-credentials
#      items:
#        - key: cloudfront.pem
#          path: cloudfront.pem
#          mode: 511

extraEnvVars:
  - name: OTEL_TRACES_EXPORTER
    value: "none"
## Additional ENV variables to set
# - name: REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY
#   value: "/var/lib/example"

initContainers: []
## Init containers to add to the Deployment
# - name: init
#   image: busybox
#   command: []

garbageCollect:
  enabled: false
  deleteUntagged: true
  schedule: "0 1 * * *"
  podAnnotations: {}
  podLabels: {}
  resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# Registry Authentication Secret Configuration
registryAuth:
  enabled: true
  secretName: "registry-auth-secret"
  # Registry URL (defaults to ingress host if not specified)
  registryUrl: ""
  # Username for registry authentication (defaults to "admin")
  username: "admin"
  # Password for registry authentication (defaults to "securepassword123")
  password: "securepassword123"
  # annotation to sync in all namespaces
  annotations:
    caretaker.dataos.io/sync: "caretaker.dataos.io=sync"
    manager.dataos.io/sync-options: "Prune=false"

# Load Balancer Configuration
loadBalancer:
  enabled: false
  type: "internal"  # internal, external, or custom
  loadBalancerClass: ""  # Optional: specify load balancer class
  loadBalancerIP: ""  # Optional: specify static IP

  # Port configuration
  ports:
  - name: "https"
    port: 443
    targetPort: 443
    protocol: "TCP"
    # nodePort: 30443  # Optional: for NodePort type
  
  # Cloud-specific annotations
  annotations: {}
  
  # GCP Configuration
  gcp:
    enabled: false
    type: "internal"  # internal, external
    subnets: []  # List of subnet names
    # Example: ["dsck-sn-private-ltw-dev", "dsck-sn-private-ltw-prod"]
    
  # AWS Configuration  
  aws:
    enabled: false
    type: "internal"  # internal, external, nlb
    subnets: []  # List of subnet IDs
    scheme: "internal"  # internal, internet-facing
    # Example: ["subnet-12345", "subnet-67890"]
    
  # Azure Configuration
  azure:
    enabled: false
    type: "internal"  # internal, external
    subnets: []  # List of subnet names
    # Example: ["private-subnet", "dmz-subnet"]